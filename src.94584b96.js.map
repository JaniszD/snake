{"version":3,"sources":["constants.ts","Utils.ts","Locations.ts","Piece.ts","Directions.ts","Game.ts","Level.ts","levels/level-1.ts","levels/level-2.ts","levels/level-3.ts","levels/level-4.ts","index.ts"],"names":[],"mappings":"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","file":"src.94584b96.js","sourceRoot":"../src","sourcesContent":["export enum keys {\n  RETURN = 13,\n  SPACE = 32,\n  LEFT = 37,\n  UP = 38,\n  RIGHT = 39,\n  DOWN = 40,\n  C = 67,\n  G = 71,\n  J = 74,\n  K = 75\n}\n\nexport const SIZE = 40;\nexport const LENGTH = 10;\nexport const MARGIN = 60;\nexport const SLOWEST = 250;\nexport const FASTEST = 0;\n","import { SIZE } from './constants';\n\nnamespace Utils {\n  export const rand = (min: number, max: number, reduce: number = SIZE): number => {\n    const num = Math.floor(Math.random() * (max - min)) + min;\n    return num - (num % reduce);\n  };\n\n  export const snap = (num: number, point = SIZE): number => {\n    const bottom = num - (num % point);\n    const top = bottom + point;\n\n    return num - bottom <= top - num ? bottom : top;\n  };\n\n  export const removeNode = (el: Element): void => {\n    if (el.parentNode) {\n      el.parentNode.removeChild(el);\n    }\n  };\n\n  export const bound = (num: number, min: number, max: number): number => {\n    return Math.max(Math.min(num, max), min);\n  };\n\n  export const debounce = <T extends Function>(fun: T, wait: number) => {\n    let id: number;\n    return (...args: any[]) => {\n      clearTimeout(id);\n      id = setTimeout(() => fun(...args), wait);\n    };\n  };\n}\n\nexport default Utils;\n","namespace Locations {\n  const data = new Map(); // { [location: string]: boolean } = {};\n\n  export const set = (x: number, y: number, value: any = true): void => {\n    data.set(`${x}:${y}`, value);\n  };\n\n  export const remove = (x: number, y: number): void => {\n    data.delete(`${x}:${y}`);\n  };\n\n  export const has = (x: number, y: number): boolean => {\n    return data.has(`${x}:${y}`);\n  };\n\n  export const get = (x: number, y: number) => {\n    return data.get(`${x}:${y}`);\n  };\n}\n\nexport default Locations;\n","import { SIZE } from './constants';\nimport Utils from './Utils';\nimport Locations from './Locations';\n\ntype PieceParams = {\n  x: number;\n  y: number;\n  type?: string;\n  direction?: string;\n  next?: Piece | null;\n  prev?: Piece | null;\n};\n\nexport default class Piece {\n  next: Piece | null;\n\n  prev: Piece | null;\n\n  x: number;\n\n  y: number;\n\n  el: HTMLDivElement;\n\n  direction: string;\n\n  type: string;\n\n  garden: HTMLDivElement;\n\n  constructor ({\n    x,\n    y,\n    type = 'body',\n    direction = 'RIGHT',\n    next = null,\n    prev = null,\n  }: PieceParams) {\n    this.direction = direction;\n    this.type = type;\n    this.x = x;\n    this.y = y;\n    this.el = document.createElement('div');\n    this.next = next;\n    this.prev = prev;\n    // Enable for a neat effect\n    // this.el.innerHTML = \"&#10096;\";\n    this.setType(type);\n    this.setPos(this.x, this.y);\n    this.garden = (document.getElementById('garden') as HTMLDivElement);\n    // this.applyClass();\n    this.garden.appendChild(this.el);\n  }\n\n  bend (headDirection: string) {\n    if (this.direction !== headDirection) {\n      this.el.className = '';\n      this.el.classList.add(\n        'cell',\n        this.type,\n        headDirection,\n        `${headDirection}-${this.direction}`\n      );\n      this.direction = headDirection;\n    }\n  }\n\n  setPos (x: number, y: number): void {\n    // CSS move the element\n    this.el.style.top = `${y}px`;\n    this.el.style.left = `${x}px`;\n\n    // this.el.style.transform = `translate(${x}px, ${y}px)`;\n\n    // reset CSS classnames basically\n    this.applyClass();\n\n    // Save the location of this piece to occupied spaces\n    // But don't do this, if we are the food or head because;\n    // - Head cannot collide with itself\n    // - We want to collide with food :)\n    if (this.type !== 'head' && this.type !== 'food' && this.type !== 'golden') {\n      Locations.set(x, y);\n    }\n  }\n\n  move (x: number, y: number, direction: string = 'RIGHT'): void {\n    let X = x;\n    let Y = y;\n\n    // Transition through walls\n    if (x < 0) {\n      X = Utils.snap(this.garden.clientWidth) - SIZE;\n    } else if (y < 0) {\n      Y = Utils.snap(this.garden.clientHeight) - SIZE;\n    } else if (x >= Utils.snap(this.garden.clientWidth)) {\n      X = 0;\n    } else if (y >= Utils.snap(this.garden.clientHeight)) {\n      Y = 0;\n    }\n\n    // Save the old direction\n    const tDirection = this.direction;\n    // Set new direction of the piece\n    this.direction = direction;\n    // Move HTML Element to new spot\n    this.setPos(X, Y);\n    // If there is a next piece move it to old position\n    if (this.next !== null) {\n      // If this piece is a head piece, immediate piece should receive heads current\n      // direction instead of old one this is needed to have a fluid motion\n      this.next.move(this.x, this.y, this.type === 'head' ? this.direction : tDirection);\n    } else {\n      // We are the last piece, previous position\n      // is now empty, clear it\n      Locations.remove(this.x, this.y);\n    }\n\n    // if I\"m part of body and no one is following me\n    // then I must be the tail\n    if (this.next === null && this.type === 'body') {\n      this.el.classList.add('tail');\n    }\n\n    // if me and the piece following me are at the same spot\n    // then piece following me must be the food we just swallowed\n    if (this.next !== null && this.next.x === X && this.next.y === Y) {\n      this.next.el.classList.add('gulp');\n    }\n\n    // Bendy corners\n    if (this.next !== null && this.direction !== this.next.direction) {\n      this.el.classList.add(`${this.direction}-${this.next.direction}`);\n    }\n\n    // store new values\n    this.x = X;\n    this.y = Y;\n  }\n\n  setType (type: string): void {\n    this.type = type;\n    this.applyClass();\n  }\n\n  applyClass (): void {\n    this.el.className = '';\n    this.el.classList.add('cell', this.type, this.direction);\n  }\n\n  isCollidingWith (node: Piece | null) {\n    if (node === null) return false;\n    return this.x === node.x && this.y === node.y;\n  }\n\n  remove (): void {\n    // Remove the piece, it\"s location and HTML element\n    // This is needed to free up memory\n    Utils.removeNode(this.el);\n    Locations.remove(this.x, this.y);\n\n    // Do the same for all linked pieces\n    if (this.next) {\n      this.next.remove();\n      this.next = null;\n    }\n  }\n}\n","import { keys } from './constants';\n\nnamespace Directions {\n  let queue: number[] = [];\n  let current: number = keys.RIGHT;\n\n  export const set = (key: number): void => {\n    queue.push(key);\n  };\n\n  export const get = (): number => {\n    return current;\n  };\n\n  export const pop = (): number => {\n    if (queue.length > 0) {\n      current = queue.shift() as number;\n    }\n    return get();\n  };\n\n  export const flush = (): void => {\n    queue = [];\n    current = keys.RIGHT;\n  };\n\n  export const peek = (): number => {\n    return queue.length > 0 ? queue[queue.length - 1] : current;\n  };\n}\n\nexport default Directions;\n","import { SIZE, MARGIN, SLOWEST, FASTEST, LENGTH, keys } from './constants';\nimport Piece from './Piece';\nimport Utils from './Utils';\nimport Level from './Level';\nimport Locations from './Locations';\nimport Directions from './Directions';\n\n// window.Locations = Locations;\nexport default class Game {\n  head: Piece;\n\n  tail: Piece;\n\n  food: Piece | null = null;\n\n  goldenApple: Piece | null = null;\n\n  length: number = 0;\n\n  growth: number = 0;\n\n  highScore: number = 0;\n\n  score: number = 0;\n\n  currentLevel: Level | null = null;\n\n  garden: HTMLDivElement;\n\n  private moving: boolean = false;\n\n  private paused: boolean = false;\n\n  private gridVisible: boolean = false;\n\n  private debugSpeed: number = 0;\n\n  private keyHeld: number = 0;\n\n  private noClip: boolean = false;\n\n  constructor (private levels: Level[]) {\n    this.head = new Piece({ x: 80, y: 80, type: 'head' });\n    this.tail = this.resetHead();\n    this.garden = document.getElementById('garden') as HTMLDivElement;\n    this.renderGarden();\n    this.handleFood();\n    this.setEvents();\n  }\n\n  renderGarden () {\n    const { clientHeight, clientWidth } = document.body;\n    let TOP = Math.floor(Math.max(50, clientHeight * 0.10));\n    let LEFT = Math.floor(Math.max(50, clientWidth * 0.10));\n    let WIDTH = clientWidth - LEFT * 2;\n    let HEIGHT = clientHeight - TOP * 2;\n\n    TOP -= TOP % SIZE;\n    LEFT -= TOP % SIZE;\n    WIDTH -= WIDTH % SIZE;\n    HEIGHT -= HEIGHT % SIZE;\n\n    this.garden.style.top = `${TOP}px`;\n    this.garden.style.left = `${LEFT}px`;\n    // this.garden.style.bottom = `${TOP}px`;\n    // this.garden.style.right = `${LEFT}px`;\n    this.garden.style.width = `${WIDTH}px`;\n    this.garden.style.height = `${HEIGHT}px`;\n\n\n    document.documentElement.style\n      .setProperty('--size', `${SIZE}px`);\n  }\n\n  getRandomLevel (): Level {\n    return this.levels[Math.floor(Math.random() * this.levels.length)];\n  }\n\n  // Remove the old chain, put HEAD in the starting position\n  resetHead (): Piece {\n    if (this.head.next) {\n      this.head.next.remove();\n      this.head.next = null;\n    }\n\n    const x = (SIZE * LENGTH) + SIZE;\n    const y = SIZE * 5;\n    this.length = LENGTH;\n    let curr = this.head;\n    this.head.move(x, y);\n\n    for (let i = 1; i <= LENGTH; i += 1) {\n      curr.next = new Piece({ x: x - SIZE * i + 2, y, prev: curr });\n      curr = curr.next;\n    }\n    curr.setType('tail');\n    return curr;\n  }\n\n  /**\n   * Reset all values and restart the game\n   */\n  start (): void {\n    // Don\"t restart already running game\n    if (this.moving === false) {\n      this.tail = this.resetHead();\n      this.debugSpeed = 0;\n      this.keyHeld = 0;\n      this.score = 0;\n      Directions.flush();\n\n      this.showScore();\n      this.moving = true;\n      requestAnimationFrame(this.frame.bind(this));\n    }\n  }\n\n  /**\n     * GAME OVER\n     */\n  over (): void {\n    this.moving = false;\n    const el = <HTMLDivElement>document.querySelector('.score');\n    el.innerHTML = `\n      Game over! Score: ${this.growth * 1000}.\n      <button id=\"start\">Click here to try again.</button>\n    `;\n  }\n\n  /**\n     * Get a random empty location for food\n     */\n  getFoodLocation (): number[] {\n    let x = Utils.rand(MARGIN, this.garden.clientWidth - MARGIN, SIZE);\n    let y = Utils.rand(MARGIN, this.garden.clientHeight - MARGIN, SIZE);\n\n    // If random spot is already filled, pick a new one\n    // Pick until you find an empty spot\n    // ..... nothing can go wrong with this\n    if (Locations.has(x, y)) {\n      [x, y] = this.getFoodLocation();\n    }\n\n    return [x, y];\n  }\n\n  handleFood (): void {\n    // If the there is no food, create a random one.\n    if (this.food == null) {\n      const [foodX, foodY] = this.getFoodLocation();\n      this.food = new Piece({ x: foodX, y: foodY, type: 'food' });\n    }\n\n    // if head and food collided, replace head with the food\n    // set the correct type for each piece\n    if (this.head.isCollidingWith(this.food) || this.head.isCollidingWith(this.goldenApple)) {\n      this.swallowFood(this.head.isCollidingWith(this.food) ? 'food' : 'golden');\n\n      // Do not count baits grabbed while\n      // in no clip mode\n      if (this.noClip === false) {\n        this.growth += 1; // Snake got bigger\n      }\n\n      this.updateScore(); // Calculate the new score\n      this.showScore(); // Update the score\n    }\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  mayIHaveGoldenApple () {\n    const chance = 5;\n    const pick = Math.random() * 100;\n    return pick < chance;\n  }\n\n  handleGoldenApple () {\n    if (this.goldenApple === null) {\n      const [foodX, foodY] = this.getFoodLocation();\n      this.goldenApple = new Piece({ x: foodX, y: foodY, type: 'golden' });\n    }\n  }\n\n  async swallowFood (type: string) {\n    if (type === 'food') {\n      if (this.food == null) { return; }\n      this.tail.next = this.food;\n      // this.tail.setType('body');\n      this.food.prev = this.tail;\n      this.tail = this.food;\n      // this.food.setType('tail');\n      this.food = null; // food is gone now\n    } else if (type === 'golden') {\n      if (this.goldenApple == null) { return; }\n      this.tail.next = this.goldenApple;\n      this.tail.setType('body');\n      this.goldenApple.prev = this.tail;\n      this.tail = this.goldenApple;\n      this.goldenApple.setType('tail');\n      this.goldenApple = null; // food is gone now\n    }\n\n    const swallow = (node: Piece) => {\n      if (node.next !== null) {\n        if (node.prev !== null) {\n          node.prev.el.classList.remove('gulp');\n        }\n\n        node.el.classList.add('gulp');\n\n        if (this.paused || !this.moving) { return; } // if paused, stop animation\n\n        setTimeout(() => {\n          requestAnimationFrame(() => {\n            swallow(node.next as Piece);\n          });\n        }, this.getSpeed() / 2);\n      }\n    };\n\n    swallow(this.head.next as Piece);\n    if (this.mayIHaveGoldenApple()) {\n      this.handleGoldenApple();\n    }\n  }\n\n  getSpeed (): number {\n    const initialSpeed = 130;\n    const calculated = (initialSpeed - this.growth * 0.5) + this.debugSpeed + this.keyHeld;\n\n    return Utils.bound(calculated, FASTEST, SLOWEST);\n  }\n\n  updateScore (): number {\n    if (this.noClip === true) {\n      return this.score;\n    }\n\n    const level = 500;\n    const speed = this.getSpeed();\n    const val = (SLOWEST - speed) * this.growth;\n    let leveled = Utils.snap(val, level);\n\n    // You should not get zero points\n    if (leveled < level) {\n      leveled = level;\n    }\n\n    this.score += leveled;\n\n    return this.score;\n  }\n\n  showScore (): void {\n    const el = <HTMLDivElement>document.querySelector('.score');\n    this.highScore = this.highScore < this.score ? this.score : this.highScore;\n    el.innerHTML = `\n            Score: ${this.score}, High Score: ${this.highScore}\n        `;\n  }\n\n  frame (): void {\n    if (this.moving) {\n      setTimeout(() => {\n        requestAnimationFrame(this.frame.bind(this));\n      }, this.getSpeed()); // higher the score, faster the snake\n    }\n\n    if (this.paused) {\n      return; // just pause\n    }\n\n    // If head hits an occupied space, GAME OVER\n    if (Locations.has(this.head.x, this.head.y) && this.noClip === false) {\n      return this.over();\n    }\n\n    // If Game is not over, then move the snake to requested direction\n    const direction = Directions.pop();\n\n    // Remove tracking for tails location.\n    Locations.remove(this.tail.x, this.tail.y);\n    // Record the last location of previous head\n    Locations.set(this.head.x, this.head.y);\n\n    // Turn tail into HEAD and move it to where head is supposed to go.\n    this.tail.setType('head');\n    switch (direction) {\n      case keys.RIGHT:\n        this.tail.move(this.head.x + SIZE, this.head.y, keys[direction]);\n        break;\n      case keys.LEFT:\n        this.tail.move(this.head.x - SIZE, this.head.y, keys[direction]);\n        break;\n      case keys.DOWN:\n        this.tail.move(this.head.x, this.head.y + SIZE, keys[direction]);\n        break;\n      case keys.UP:\n        this.tail.move(this.head.x, this.head.y - SIZE, keys[direction]);\n        break;\n      default:\n    }\n\n    const prevHead = this.head;\n\n    // Turn the piece before the tail into new tail.\n    [this.head, this.tail] = [this.tail, this.tail.prev as Piece];\n    this.tail.next = null; // nothing after the tail.\n    this.tail.setType('tail');\n\n\n    // turn previous head into body piece\n    prevHead.setType('body');\n    prevHead.prev = this.head;\n    // if head changed direction, bend this piece accordingly.\n    prevHead.bend(this.head.direction);\n\n    this.head.prev = null; // nothing before the head\n    this.head.next = prevHead; // previous head follows new head\n    this.head.setType('head'); // it is head.\n\n    // Check if we caught caught the food\n    // or we need to place a new food\n    this.handleFood();\n  }\n\n  /**\n   * Don\"t let snake to go backwards\n   */\n  // eslint-disable-next-line class-methods-use-this\n  notBackwards (key: number): boolean {\n    const lastDirection = Directions.peek();\n\n    if ((lastDirection === keys.UP && key === keys.DOWN)\n        || (lastDirection === keys.DOWN && key === keys.UP)\n        || (lastDirection === keys.LEFT && key === keys.RIGHT)\n        || (lastDirection === keys.RIGHT && key === keys.LEFT)) {\n      return false;\n    }\n    return true;\n  }\n\n  setEvents (): void {\n    document.addEventListener('keydown', (e: KeyboardEvent) => {\n      switch (e.keyCode) {\n        // Toggle Grid\n        case keys.G:\n          if (this.gridVisible) {\n            this.removeGrid();\n          } else {\n            this.drawGrid();\n          }\n          break;\n          // Enable No Clip mode.\n        case keys.C:\n          this.noClip = !this.noClip;\n          this.garden.classList.toggle('noclip');\n          break;\n          // Slowdown the snake\n        case keys.J:\n          this.debugSpeed += 10;\n          break;\n          // Speed up the snake\n        case keys.K:\n          this.debugSpeed -= 10;\n          break;\n          // Pause or restart the game\n        case keys.SPACE:\n          if (this.moving) {\n            this.paused = !this.paused;\n          } else {\n            this.start();\n          }\n          e.preventDefault();\n          break;\n          // Restart the game\n        case keys.RETURN:\n          this.start();\n          break;\n          // Arrow keys or nothing\n        default:\n          // Select levels\n          // 0 = remove level\n          // 1-9 = render level if exists\n          if (e.keyCode >= 48 && e.keyCode <= 57) {\n            const num = e.keyCode - 48; // to get the pressed number\n\n            if (num === 0) {\n              if (this.currentLevel) {\n                this.currentLevel.remove();\n                this.currentLevel = null;\n              }\n            } else if (num - 1 in this.levels) {\n              if (this.currentLevel) {\n                this.currentLevel.remove();\n              }\n              this.currentLevel = this.levels[num - 1];\n              this.currentLevel.render();\n            }\n          }\n\n          if (e.keyCode in keys && this.notBackwards(e.keyCode)) {\n            if (Directions.peek() !== e.keyCode) {\n              Directions.set(e.keyCode);\n            } else {\n              this.keyHeld -= 50;\n            }\n            e.preventDefault();\n          }\n      }\n    });\n\n    document.addEventListener('keyup', () => {\n      this.keyHeld = 0;\n    });\n\n    document.addEventListener('click', (e: MouseEvent) => {\n      const el = <HTMLElement>e.target;\n      if (el.id === 'start') {\n        this.start();\n      }\n    });\n\n    window.addEventListener('resize', Utils.debounce(() => {\n      this.renderGarden();\n\n      if (this.currentLevel) {\n        this.currentLevel.remove();\n        this.currentLevel.render();\n      }\n\n      if (this.gridVisible) {\n        this.removeGrid();\n        this.drawGrid();\n      }\n\n      if (this.food !== null) {\n        this.food.remove();\n        this.food = null;\n        this.handleFood();\n      }\n\n      if (this.goldenApple !== null) {\n        this.goldenApple.remove();\n        this.goldenApple = null;\n        this.handleGoldenApple();\n      }\n    }, 100));\n  }\n\n  removeGrid (): void {\n    const grids = document.querySelectorAll('.vertical-grid, .horizontal-grid');\n    Array.from(grids).forEach(div => {\n      Utils.removeNode(div);\n    });\n\n    this.gridVisible = false;\n  }\n\n  drawGrid (): void {\n    for (let x = 0; x < this.garden.clientWidth; x += SIZE) {\n      const div = document.createElement('div');\n      div.style.top = '0px';\n      div.style.left = `${x}px`;\n      div.classList.add('vertical-grid');\n      this.garden.appendChild(div);\n    }\n\n    for (let x = 0; x < this.garden.clientHeight; x += SIZE) {\n      const div = document.createElement('div');\n      div.style.left = '0px';\n      div.style.top = `${x}px`;\n      div.classList.add('horizontal-grid');\n      this.garden.appendChild(div);\n    }\n\n    this.gridVisible = true;\n  }\n}\n","import Piece from './Piece';\nimport { SIZE } from './constants';\n\ntype coord = [number, number];\ntype line = coord[];\nexport type LevelMap = line[];\n\nexport default class Level {\n  private pieces: Piece[] = [];\n\n  garden: HTMLDivElement;\n\n  constructor (private generatorFunction: (rows: number, cols: number) => LevelMap) {\n    this.generatorFunction = generatorFunction;\n    this.garden = (document.getElementById('garden') as HTMLDivElement);\n  }\n\n  // eslint-disable-next-line class-methods-use-this\n  private translate (x: number, y: number): coord {\n    return [Math.floor(x) * SIZE, Math.floor(y) * SIZE];\n  }\n\n  remove (): void {\n    this.pieces.forEach(piece => {\n      piece.remove();\n    });\n  }\n\n  line (x0: number, y0: number, x1: number, y1: number): void {\n    const dx = Math.abs(x1 - x0);\n    const dy = Math.abs(y1 - y0);\n    const sx = (x0 < x1) ? 1 : -1;\n    const sy = (y0 < y1) ? 1 : -1;\n    let err = dx - dy;\n\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n      // Waiting for proposal\n      // https://github.com/Microsoft/TypeScript/issues/5296\n      // this.pieces.push(new Piece(...this.translate(x0, y0), \"wall\"));\n      const [tx0, ty0] = this.translate(x0, y0);\n      this.pieces.push(new Piece({ x: tx0, y: ty0, type: 'wall' }));\n\n      // break when line is done\n      if (Math.abs(x0 - x1) <= 0.5 && Math.abs(y0 - y1) <= 0.5) break;\n\n      const e2 = 2 * err;\n\n      if (e2 > -dy) {\n        err -= dy;\n        x0 += sx;\n      }\n\n      if (e2 < dx) {\n        err += dx;\n        y0 += sy;\n      }\n    }\n  }\n\n  render (): void {\n    const cols = Math.floor(this.garden.clientHeight / SIZE);\n    const rows = Math.floor(this.garden.clientWidth / SIZE);\n    const level = this.generatorFunction(rows, cols);\n\n    level.forEach(line => {\n      const [x0, y0]: coord = line[0];\n      const [x1, y1]: coord = line[1];\n\n      this.line(x0, y0, x1, y1);\n    });\n  }\n}\n","import Level, { LevelMap } from '../Level';\n\nexport default new Level((rows, cols): LevelMap => {\n  const [halfCols, halfRows] = [cols / 2, rows / 2];\n  return [\n    // top walls\n    [[3, 3], [halfRows - 3, 3]],\n    [[halfRows + 3, 3], [rows - 3, 3]],\n\n    // right walls\n    [[rows - 3, 3], [rows - 3, halfCols - 3]],\n    [[rows - 3, halfCols + 3], [rows - 3, cols - 3]],\n\n    // bottom walls\n    [[rows - 3, cols - 3], [halfRows + 3, cols - 3]],\n    [[halfRows - 3, cols - 3], [3, cols - 3]],\n\n    // Left walls\n    [[3, cols - 3], [3, halfCols + 3]],\n    [[3, halfCols - 3], [3, 3]],\n  ];\n});\n","import Level, { LevelMap } from '../Level';\n\nexport default new Level((rows, cols): LevelMap => {\n  const [halfRows, halfCols] = [rows / 2, cols / 2];\n  return [\n    [[halfRows - 2, halfCols], [halfRows + 2, halfCols]],\n    [[halfRows, halfCols - 2], [halfRows, halfCols + 2]],\n\n    [[halfRows - 8, halfCols - 8], [halfRows - 3, halfCols - 3]],\n    [[halfRows + 3, halfCols + 3], [halfRows + 8, halfCols + 8]],\n\n    [[halfRows + 8, halfCols - 8], [halfRows + 3, halfCols - 3]],\n    [[halfRows - 3, halfCols + 3], [halfRows - 8, halfCols + 8]],\n  ];\n});\n","import Level, { LevelMap } from '../Level';\n\nexport default new Level((rows, cols): LevelMap => {\n  const [halfRows, halfCols] = [rows / 2, cols / 2];\n  return [\n    // top walls\n    [[3, 3], [halfRows - 3, 3]],\n    [[halfRows + 3, 3], [rows - 3, 3]],\n\n    // right walls\n    [[rows - 3, 3], [rows - 3, halfCols - 3]],\n    [[rows - 3, halfCols + 3], [rows - 3, cols - 3]],\n\n    // bottom walls\n    [[rows - 3, cols - 3], [halfRows + 3, cols - 3]],\n    [[halfRows - 3, cols - 3], [3, cols - 3]],\n\n    // Left walls\n    [[3, cols - 3], [3, halfCols + 3]],\n    [[3, halfCols - 3], [3, 3]],\n\n    // inner walls\n    // top walls\n    [[9, 9], [halfRows - 6, 9]],\n    [[halfRows + 6, 9], [rows - 9, 9]],\n\n    // right walls\n    [[rows - 9, 9], [rows - 9, halfCols - 6]],\n    [[rows - 9, halfCols + 6], [rows - 9, cols - 9]],\n\n    // bottom walls\n    [[rows - 9, cols - 9], [halfRows + 6, cols - 9]],\n    [[halfRows - 6, cols - 9], [9, cols - 9]],\n\n    // Left walls\n    [[9, cols - 9], [9, halfCols + 6]],\n    [[9, halfCols - 6], [9, 9]],\n  ];\n});\n","import Level, { LevelMap } from '../Level';\n\nexport default new Level((rows, cols): LevelMap => {\n  // const [halfRows, halfCols] = [rows / 2, cols / 2];\n  return [\n    [[3, 3], [rows - 3, cols - 3]],\n    [[rows - 3, 3], [3, cols - 3]],\n  ];\n});\n","import Game from './Game';\nimport level1 from './levels/level-1';\nimport level2 from './levels/level-2';\nimport level3 from './levels/level-3';\nimport level4 from './levels/level-4';\n\n\nexport default new Game([\n  level1,\n  level2,\n  level3,\n  level4,\n]);\n"]}